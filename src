import pandas as pd
import dash
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output, State
from sqlalchemy import create_engine, text
import io

# Criação da instância do Dash
app = dash.Dash(__name__, suppress_callback_exceptions=True)

# Configuração da conexão com o banco de dados Protheus12 usando SQLAlchemy
server = '**********'
database = '*********'
username = '**********'
password = '**********'
driver = 'ODBC Driver 18 for SQL Server'

# Conectando ao banco de dados usando SQLAlchemy
connection_string = (
    f'mssql+pyodbc://{username}:{password}@{server}/{database}?'
    f'driver={driver}&Encrypt=yes&TrustServerCertificate=yes'
)
engine = create_engine(connection_string)

# Definindo a consulta SQL
query = '''
SELECT 
    CASE
        WHEN (SELECT TOP 1 [Aprovador] FROM VW_MN_PEDIDOS_COMPRA_EM_APROVACAO
                WHERE [Pedido] = PD.[Num.PC]) IS NOT NULL 
        THEN (SELECT TOP 1 [Aprovador] FROM VW_MN_PEDIDOS_COMPRA_EM_APROVACAO
                WHERE [Pedido] = PD.[Num.PC])
        WHEN (SELECT TOP 1 [Aprovador] FROM VW_MN_PEDIDOS_COMPRA_EM_APROVACAO
                WHERE [Pedido] = PD.[Num.PC]) IS NULL AND PD.[Num.PC] IS NOT NULL THEN 'Aprovado'
        ELSE 'Em Cotação'
    END [Status],
    PD.[Num.PC], SC.[NÚM SC] AS [Numero da SC],
    ISNULL(PD.[Solicitante], SC.[SOLICITANTE]) AS [Solicitante],
    ISNULL(PD.[Observacoes], SC.[OBSERVAÇÃO]) AS [Observacoes],
    PD.[Fornecedor], PD.[Loja], PD.[Razao Social],
    ISNULL(PD.[Produto], SC.[PRODUTO]) AS [Produto],
    ISNULL(PD.[Descricao], SC.[DESCRIÇÃO]) AS [Descricao],
    CONVERT(VARCHAR, CONVERT(DATE, ISNULL(PD.[Emissao], SC.[EMISSÃO])), 103) AS [Emissao],
    [Entrega],
    ISNULL(PD.[UM], SC.[UOM]) AS [UM],
    ISNULL(PD.[Quantidade], SC.[QUANT ORIGINAL]) AS [Qtd. Original],
    [Prc Unitario], [Vlr.Total], [Qtd.Entregue],
    ISNULL(PD.[Quant.Receber], SC.[SALDO COMPRAR]) AS [Saldo],
    [Saldo Receber],
    ISNULL(PD.[Tipo], SC.[TIPO]) AS [TIPO],
    ISNULL(PD.[C Custo], SC.[C Custo]) AS [C Custo],
    ISNULL(PD.[DEPARTAMENTO], SC.[DEPARTAMENTO]) AS [Departamento],
    [Cta Contabil], [Moeda], [Tx Dolar]
FROM VW_MN_PEDIDOS_COMPRA_EM_ABERTO AS PD
FULL JOIN VW_MN_SC_COMPRA_EM_ABERTO AS SC
    ON PD.[Item SC] = SC.[ITEM SC] AND PD.[Numero da SC] = SC.[NÚM SC]
    AND SC.[EMISSÃO] >= '20230101'
'''

# Executando a consulta e armazenando o resultado em um DataFrame do pandas
with engine.connect() as connection:
    df = pd.read_sql(text(query), connection)

df['Emissao'] = pd.to_datetime(df['Emissao'], dayfirst=True)

# Limpar a coluna 'C Custo' antes de converter para inteiros
df['C Custo'] = df['C Custo'].astype(str).str.strip()  # Remove espaços em branco
df['C Custo'] = pd.to_numeric(df['C Custo'], errors='coerce')  # Converte para numérico, transformando valores inválidos em NaN
df.dropna(subset=['C Custo'], inplace=True)  # Remove linhas com NaN na coluna 'C Custo'
df['C Custo'] = df['C Custo'].astype(int)  # Converte para inteiros
df = df.sort_values(by=['Emissao'], ascending=[False])
df['Emissao'] = df["Emissao"].dt.strftime('%d/%m/%Y')

# Mapeamento de C Custo para seus nomes ou descrições
ccusto_mapping = {
'1011': 'PRESIDENCIA',
'1012': 'CORPORATIVO',
'1021': 'PLANEJAMENTO',
'1022': 'GERENCIA - PLANEJAMENTO',
'1023': 'PLANEJAMENTO',
'1031': 'T.I.',
'1032': 'GERENCIA - TI',
'1033': 'TI AM',
'1041': 'RECRUTAMENTO E SELECAO',
'1042': 'MANUTENCAO',
'1043': 'SERVICOS GERAIS',
'1044': 'DP. JURIDICO',
'1045': 'ADMINISTRACAO DE PESSOAL AM',
'1046': 'ADMINISTRACAO DE PESSOAL',
'1047': 'APRENDIZ',
'1048': 'LOJA GAMA',
'1049': 'GERENCIA - RH',
'1051': 'ADM - LOGISTICA',
'1052': 'ESTOQUE',
'1053': 'IMPORTACAO',
'1054': 'POS VENDA - SAC',
'1055': 'POS VENDAS - POSTOS',
'1056': 'ASSIST TECNICA',
'1057': 'GERENCIA - LOGISTICA',
'1058': 'RETRABALHO - LOGISTICA',
'1059': 'LOGISTICA - SC',
'1061': 'COMPRAS',
'1071': 'TRIBUTOS',
'1072': 'REC/DESP FINANCEIRA',
'1081': 'CONTAS A PAGAR',
'1082': 'CREDITO E COBRANCA',
'1083': 'GERENCIA - FINANCEIRO',
'1091': 'CONTROLADORIA',
'1092': 'APOIO ADM E LEGAL',
'1093': 'CONSULTOR EXTERNO',
'1094': 'GERENCIA - CONTROLADORIA',
'1095': 'CONTROLADORIA AM',
'1111': 'DIRETORIA COMERCIAL',
'1112': 'NORTE/ NORDESTE',
'1113': 'ELETRO',
'1114': 'BELEZA',
'1115': 'HUMMER',
'1116': 'DIRETORIA COMERCIAL',
'1117': 'TELEVENDAS',
'1118': 'GERENCIA - ADM DE VENDAS',
'1119': 'ADM. VENDAS',
'1121': 'MARKETING',
'1122': 'IGI',
'1123': 'EDUCACAO PROFISSIONAL',
'1124': 'TRADE MARKETING (EXTERNO)',
'1125': 'MKT - PROFISSIONAL',
'1126': 'LOJA GAMA',
'1127': 'CERTIFICACOES',
'1128': 'TRADE MARKETING INTERNO',
'1129': 'RETRABALHO MKT',
'1131': 'CONTAS ESPECIAIS',
'1132': 'GERENCIA - CONT ESPECIAIS',
'1133': 'NOVOS NEGOCIOS',
'1134': 'INTELIGENCIA DE MERCADO',
'1135': 'GERENCIA COMERCIAL',
'1136': 'E-COMMERCE',
'1141': 'REGIONAIS',
'1142': 'TRADE MARKETING (INTERNO)',
'1143': 'COMERCIAL - PROFISSIONAL',
'1144': 'CONTAS-CHAVE 4',
'1145': 'REGIONAL BA+SE+NORTE',
'1146': 'REGIONAL NORDESTE',
'1147': 'REGIONAL RJ+ES',
'1148': 'REGIONAL SP INTERIOR',
'1149': 'REGIONAL SP CAPITAL',
'1150': 'REGIONAL MG+TO',
'1151': 'BRAUN',
'1152': 'REGIONAL SUL',
'1153': 'CANAL BELEZA',
'1161': 'TRANSITORIA AM',
'1200': 'CONTROLADORIA',
'1201': 'ALMOXARIFADO',
'1202': 'QUALIDADE',
'1203': 'ENGENHARIA DE PROCESSOS',
'1204': 'MANUTENCAO',
'1205': 'COMPRAS',
'1206': 'FERRAMENTARIA',
'1207': 'TECNOLOGIA DA INFORMACAO',
'1208': 'ENGENHARIA DE PRODUTOS',
'1209': 'GERENCIA INDUSTRIAL',
'1210': 'RECURSOS HUMANOS',
'1211': 'PCPM',
'1212': 'SESMT',
'1213': 'FACILITIES',
'1214': 'MOD IQ PERFETTO',
'1215': 'MOI IQ PERFETTO',
'1216': 'PCP',
'1217': 'FERRAMENTARIA',
'1218': 'PRODUCAO INJ PLASTICA',
'1219': 'PRODUTO ACABADO PRANCHA',
'1220': 'SALA DE PINTURA',
'1221': 'PRODUTO ACABADO SECADOR',
'1222': 'SETOR TAMPOGRAFIA',
'1223': 'MOI  PRANCHA',
'1224': 'MOI SECADOR',
'1225': 'SETOR CALEFATOR',
'1226': 'PLACA SECADOR',
'1227': 'SUBCONJUNTO PATIM',
'1228': 'SETOR ESTAMPARIA',
'1229': 'SETOR PINTURA',
'1230': 'MOI INJ PLASTICA',
'1231': 'MOI TAMPOGRAFIA',
'1232': 'MOI PINTURA',
'1233': 'TECNOLOGIA DA INFORMACAO',
'1234': 'JOVEM APRENDIZ',
'1300': 'PRODUCAO INJ PLASTICA',
'1301': 'PRODUTO ACABADO PRANCHA',
'1302': 'PRODUTO ACABADO SECADOR',
'1303': 'TAMPOGRAFIA',
'1304': 'MOI PRANCHA',
'1305': 'MOI SECADOR',
'1306': 'ESTAMPARIA',
'1307': 'PINTURA',
'1308': 'MOI INJ PLASTICA',
'1309': 'MOI TAMPOGRAFIA',
'1310': 'MOI PINTURA',
'1311': 'CALEFATOR',
'1312': 'MOI CALEFATOR',
'1313': 'DESP COM CONDOMINIO',
'1314': 'MOI IQ PERFETTO',
'1511': 'MDS - MEN DRY SAVING (BARBEADORES)',
'1512': 'FEHR-FEMALE ELETRIC HAIR REMOVAL -DEPILD',
'1513': 'ETB-ELETRIC TOOTH BRUSHES-ESCV DENTE ELE',
'1514': 'IRONS (PRANCHAS)',
'1515': 'HAIR DRYERS (SECADORES)',
'1516': 'HOUSE HOLD APPLIANCES (ELETRODOMESTICOS)',
'1521': 'OTHER EXPENSES (OUTRAS DESPESAS)',
'1601': 'ISSUE - OUTRAS DESPESAS',
'2000': 'AUTO SERVICOS',
'2001': 'CATALOGOS PREMIOS',
'2002': 'DEPARTAMENTOS',
'2003': 'ESPECIALIDADE',
'2004': 'FARMACIA',
'2005': 'INDIRETO PROFISSIONAL',
'2006': 'GAMA ITALY DO BRASIL',
'2007': 'GM DUNA INVERSIONES',
'2008': 'DUNA ENTERPRISES S.L',
'2009': 'SAFERY S.A',
'2010': 'DISTRI BEAUTY S.A',
'2011': 'ARIMEX IMPORTADORA S.A',
'2012': 'GAMA CHILE S.A',
'2013': 'ITALIAN BEAUTY S.A.C',
'2014': 'ITALIAN GROUP S.A DE C.V',
'2015': 'GA.MA COLOMBIA LTDA',
'7902': 'GIF PA PRANCHA',
'7903': 'GIF PA SECADOR',
'7904': 'GIF CALEFATOR',
'7907': 'GIF ESTAMPARIA',
'7910': 'GIF PLACA SECADOR',
'7911': 'GIF SALA DE PINTURA',
'7912': 'GIF TAMPOGRAFIA',
'7913': 'GIF INJ PLASTICA',
'7914': 'GIF CALEFATOR',
'7915': 'GIF MOLA',
'8902': 'MOI PA PRANCHA',
'8903': 'MOI PA SECADOR',
'8904': 'MOI CALEFATOR',
'8907': 'MOI ESTAMPARIA',
'8910': 'MOI PLACA SECADOR',
'8911': 'MOI SALA DE PINTURA',
'8912': 'MOI TAMPOGRAFIA',
'8913': 'MOI INJ PLASTICA',
'8914': 'MOI CALEFATOR',
'8915': 'MOI MOLA',
'9901': 'PROD. S.A. PCS INJETADAS',
'9902': 'PRODUTO ACABADO PRANCHA',
'9903': 'PRODUTO ACABADOR SECADOR',
'9904': 'MONTAGEM CALEFATOR',
'9905': 'INJECAO PLASTICA',
'9906': 'PATIN',
'9907': 'ESTAMPARIA',
'9908': 'PROD. S.A. PATIN',
'9909': 'PROD. S.A. PLACA',
'9910': 'MONTAGEM PLACA',
'9911': 'MOD SALA DE PINTURA',
'9912': 'MOD TAMPOGRAFIA',
'9913': 'INJECAO PLASTICA',
'9914': 'MOD CALEFATOR',
'9915': 'MOD MOLA',
}

# Dicionário de mapeamento de C Custo para senhas
ccusto_passwords = {
    '1011': '4027', '1012': '9584', '1021': '7254', '1022': '3953', '1023': '6084',
    '1031': '6934', '1032': '4118', '1033': '3831', '1041': '7547', '1042': '3724',
    '1043': '1604', '1044': '9546', '1045': '2055', '1046': '9271', '1047': '3349',
    '1048': '6209', '1049': '4273', '1051': '9164', '1052': '3075', '1053': '5542',
    '1054': '4164', '1055': '2559', '1056': '2132', '1057': '7048', '1058': '4622',
    '1059': '2926', '1061': '6763', '1071': '4337', '1072': '1775', '1081': '9886',
    '1082': '3964', '1083': '4862', '1091': '2591', '1092': '3800', '1093': '1382',
    '1094': '7115', '1095': '6654', '1111': '7011', '1112': '3346', '1113': '5188',
    '1114': '1383', '1115': '7067', '1116': '8559', '1117': '8189', '1118': '1052',
    '1119': '7654', '1121': '1913', '1122': '7922', '1123': '2767', '1124': '3784',
    '1125': '3964', '1126': '2655', '1127': '2526', '1128': '2798', '1129': '5612',
    '1131': '5039', '1132': '4655', '1133': '7894', '1134': '3755', '1135': '3068',
    '1136': '5294', '1141': '1265', '1142': '7295', '1143': '7892', '1144': '5575',
    '1145': '1847', '1146': '6162', '1147': '5151', '1148': '8837', '1149': '9055',
    '1150': '1499', '1151': '4009', '1152': '8478', '1153': '9856', '1161': '5680',
    '1200': '7486', '1201': '9632', '1202': '7412', '1203': '8521', '1204': '6412',
    '1205': '9810', '1206': '5973', '1207': '8462', '1208': '5971', '1209': '3519',
    '1210': '7458', '1211': '9756', '1212': '2587', '1213': '2589', '1214': '6120',
    '1215': '1710', '1216': '7214', '1217': '9550', '1218': '7957', '1219': '1627',
    '1220': '9658', '1221': '8913', '1222': '8647', '1223': '6384', '1224': '5066',
    '1225': '8775', '1226': '6009', '1227': '6172', '1228': '4783', '1229': '4720',
    '1230': '9541', '1231': '3562', '1232': '4455', '1233': '6998', '1234': '3603',
    '1300': '9651', '1301': '7541', '1302': '4567', '1303': '1324', '1304': '7777',
    '1305': '4444', '1306': '3333', '1307': '7823', '1308': '0908', '1309': '7386',
    '1310': '7765', '1311': '0235', '1312': '5225', '1313': '4377', '1314': '2720',
    '1511': '6952', '1512': '7988', '1513': '9735', '1514': '7232', '1515': '1674',
    '1516': '7414', '1521': '3801', '1601': '8436', '2000': '6901', '2001': '2793',
    '2002': '8450', '2003': '5703', '2004': '1429', '2005': '5356', '2006': '9170',
    '2007': '5357', '2008': '6334', '2009': '9005', '2010': '6887', '2011': '3125',
    '2012': '6762', '2013': '6416', '2014': '5779', '2015': '5968', '7902': '6767',
    '7903': '3506', '7904': '9999', '7907': '4602', '7910': '1215', '7911': '9943',
    '7912': '2842', '7913': '5207', '7914': '2406', '7915': '6302', '8902': '4249',
    '8903': '4561', '8904': '9084', '8907': '2823', '8910': '8698', '8911': '5219',
    '8912': '7760', '8913': '5913', '8914': '6754', '8915': '9184', '9901': '9521',
    '9902': '6683', '9903': '7104', '9904': '2412', '9905': '6795', '9906': '1629',
    '9907': '8267', '9908': '3267', '9909': '8765', '9910': '2269', '9911': '4484',
    '9912': '4089', '9913': '8335', '9914': '6346', '9915': '5690',
}

# Função para criar o dropdown de "C Custo" com nome e número
def create_ccusto_dropdown(ccusto_list):
    return html.Div([
        dcc.Dropdown(
            id='ccusto-dropdown',
            options=[{'label': f'{c} - {ccusto_mapping.get(str(c), "Desconhecido")}', 'value': c} for c in ccusto_list],
            placeholder='Selecione o C Custo',
            style={'width': '50%', 'marginBottom': '20px'}
        ),
        html.Button('Gerar arquivo CSV', id='btn-generate-csv', n_clicks=0, style={'float': 'right'}),
        dcc.Download(id="download-dataframe-csv"),
    ])

# Layout do login
login_layout = html.Div(style={'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'height': '100vh', 'backgroundColor': '#f0f0f0'}, children=[
    html.Div(style={'width': '300px', 'padding': '20px', 'borderRadius': '10px', 'boxShadow': '0px 4px 8px rgba(0, 0, 0, 0.1)', 'backgroundColor': '#ffffff'}, children=[
        html.H2('Login', style={'textAlign': 'center', 'color': '#003f7f'}),
        dcc.Input(id='username', type='text', placeholder='C Custo', style={'width': '95%', 'padding': '10px', 'marginTop': '10px', 'marginBottom': '10px', 'borderRadius': '5px', 'border': '1px solid #ddd'}),
        dcc.Input(id='password', type='password', placeholder='Senha', style={'width': '95%', 'padding': '10px', 'marginBottom': '10px', 'borderRadius': '5px', 'border': '1px solid #ddd'}),
        html.Button('Entrar', id='login-button', style={'width': '100%', 'padding': '10px', 'borderRadius': '5px', 'backgroundColor': '#003f7f', 'color': 'white', 'border': 'none', 'cursor': 'pointer'})
    ])
])

# Layout do dashboard
app.layout = html.Div([
    dcc.Location(id='url', refresh=True),
    html.Div(id='page-content', children=login_layout)
])

# Função para renderizar o dashboard
def render_dashboard(filtered_df, ccusto_options):
    return html.Div([
        html.H1('Pedidos de Compra em Aberto', style={'fontSize': '18px', 'color': '#003f7f', 'textAlign': 'center'}),
        create_ccusto_dropdown(ccusto_options),
        dcc.Input(id='search-bar', type='text', placeholder='Pesquisar...', style={'width': '50%', 'marginBottom': '20px', 'marginTop': '20px'}),
        dash_table.DataTable(
            id='table',
            columns=[
                {"name": "Num.PC", "id": "Num.PC"},
                {"name": "Numero da SC", "id": "Numero da SC"},
                {"name": "Status", "id": "Status"},
                {"name": "Solicitante", "id": "Solicitante"},
                {"name": "Fornecedor", "id": "Fornecedor"},
                {"name": "Loja", "id": "Loja"},
                {"name": "Razao Social", "id": "Razao Social"}
            ],
            data=filtered_df[['Num.PC', 'Numero da SC', 'Status', 'Solicitante', 'Fornecedor', 'Loja', 'Razao Social']].drop_duplicates().to_dict('records'),
            page_size=10,
            style_table={'overflowX': 'auto', 'border': '1px solid #ddd'},
            style_cell={'height': 'auto', 'minWidth': '100px', 'width': '100px', 'maxWidth': '100px', 
                        'whiteSpace': 'normal', 'textAlign': 'left', 'border': '1px solid #ddd', 'fontSize': '10px', 'backgroundColor': '#ffffff'},
            style_header={'border': '1px solid #ddd', 'backgroundColor': '#003f7f', 'color': 'white', 'fontSize': '12px'},
            row_selectable='single', selected_rows=[],
            style_data_conditional=[
                {
                    'if': {'column_id': 'Status', 'filter_query': '{Status} = "Aprovado"'},
                    'backgroundColor': '#d4edda',
                    'color': 'black',
                },
                {
                    'if': {'column_id': 'Status', 'filter_query': '{Status} != "Aprovado"'},
                    'backgroundColor': '#fff3cd',
                    'color': 'black',
                },
            ],
        ),
        html.Div(id='details-container')
    ])

# Callback para o login
@app.callback(
    Output('page-content', 'children'),
    Input('login-button', 'n_clicks'),
    State('username', 'value'),
    State('password', 'value')
)
def login(n_clicks, username, password):
    if n_clicks is None:
        return login_layout

    if ((username == 'Master' and password == 'J~8iIfA=') or
    (username == 'Compras' and password == '9810')):
        ccusto_options = [int(c) for c in df['C Custo'].astype(str).unique()]
        return render_dashboard(df, ccusto_options)

    if username in ccusto_passwords and password == ccusto_passwords[username]:
        ccusto = int(username)
        filtered_df = df[df['C Custo'].astype(int) == ccusto]
        ccusto_options = [ccusto]
        return render_dashboard(filtered_df, ccusto_options)

    return html.Div("Credenciais inválidas! Recarregue a pagina e Tente novamente.", style={'textAlign': 'center', 'color': 'red'})

# Callback para atualizar a tabela com base na seleção do dropdown
@app.callback(
    Output('table', 'data'),
    Input('ccusto-dropdown', 'value'),
    Input('search-bar', 'value')
)
def update_table(selected_ccusto, search_value):
    filtered_df = df.copy()
    if selected_ccusto:
        filtered_df = filtered_df[filtered_df['C Custo'] == selected_ccusto]
    if search_value:
        filtered_df = filtered_df[filtered_df.apply(lambda row: row.astype(str).str.contains(search_value, case=False).any(), axis=1)]
    return filtered_df[['Num.PC', 'Numero da SC', 'Status', 'Solicitante', 'Fornecedor', 'Loja', 'Razao Social']].drop_duplicates().to_dict('records')


# Callback para gerar CSV
@app.callback(
    Output("download-dataframe-csv", "data"),
    Input("btn-generate-csv", "n_clicks"),
    Input("ccusto-dropdown", "value"),
    prevent_initial_call=True,
)
def generate_csv(n_clicks, selected_cc):
    if n_clicks > 0 and selected_cc:  # Garante que o botão foi clicado e um C Custo foi selecionado
        filtered_df = df[df['C Custo'] == selected_cc]
        
        # Criar um buffer em memória
        buffer = io.BytesIO()
        filtered_df.to_csv(buffer, sep=';', index=False)  # Usando ponto e vírgula como delimitador
        buffer.seek(0)  # Retornar ao início do buffer
        
        return dcc.send_bytes(buffer.getvalue(), "dados.csv")  # Envia os dados do buffer como um arquivo CSV
    return None  # Não gera nada se o botão não foi clicado ou se nenhum C Custo foi selecionado

# Callback para atualizar os detalhes do item selecionado
@app.callback(
    Output('details-container', 'children'),
    [Input('table', 'selected_rows')],
    [State('table', 'data')]
)
def update_details(selected_rows, data):
    # Verifica se há seleção de linha
    if not selected_rows:
        return html.Div("Selecione um pedido para ver os detalhes.", style = {'fontSize': '18px', 'color': '#000000', 'textAlign': 'center', 'border': '1px solid #ddd' })

    selected_row_index = selected_rows[0]
    
    # Verifica se o índice selecionado está dentro do intervalo dos dados
    if selected_row_index >= len(data):
        return html.Div("Índice selecionado fora do intervalo dos dados.")

    selected_num_pc = data[selected_row_index]['Num.PC']
    
    # Conecta ao banco de dados e lê os dados
    with engine.connect() as connection:
        df = pd.read_sql(text(query), connection)
    
    # Filtra os detalhes do pedido com base no Num.PC
    pedido_detalhado = df[df['Num.PC'] == selected_num_pc]
    
    # Se não encontrar pelo Num.PC, tenta pelo Numero da SC
    if pedido_detalhado.empty:
        selected_sc = data[selected_row_index]['Numero da SC']
        pedido_detalhado = df[df['Numero da SC'] == selected_sc]
    
    # Se ainda não encontrar, retorna mensagem de erro
    if pedido_detalhado.empty:
        return html.Div(f"Nenhum detalhe encontrado para Num.PC: {selected_num_pc}.")

    # Determina as colunas a serem exibidas
    columns_to_show = [col for col in pedido_detalhado.columns if col not in ['Status', 'Solicitante', 'Fornecedor', 'Loja', 'Razao Social']]
    
    if 'Status' not in columns_to_show:
        columns_to_show.append('Status')

    # Processamento adicional do DataFrame (se necessário)
    df['Emissao'] = pd.to_datetime(df['Emissao'], dayfirst=True)
    df['C Custo'] = df['C Custo'].astype(str).str.strip()
    df['C Custo'] = pd.to_numeric(df['C Custo'], errors='coerce')
    df.dropna(subset=['C Custo'], inplace=True)
    df['C Custo'] = df['C Custo'].astype(int)
    df = df.sort_values(by=['Emissao'], ascending=[False])
    df['Emissao'] = df["Emissao"].dt.strftime('%d/%m/%Y')
    
    # Exibição dos detalhes em uma tabela formatada
    return html.Table(style={'width': '100%', 'borderCollapse': 'collapse', 'border': '1px solid #ddd'}, children=[
        html.Thead(html.Tr([html.Th(col, style={'border': '1px solid #ddd', 'padding': '8px', 'backgroundColor': '#003f7f', 'color': 'white', 'fontSize': '10px'})
                            for col in columns_to_show])),
        html.Tbody([html.Tr([html.Td(pedido_detalhado[col], style={'border': '1px solid #ddd', 'padding': '8px', 'fontSize': '10px'}) 
                             for col in columns_to_show]) for _, pedido_detalhado in pedido_detalhado.iterrows()])
    ])

# Inicializa o servidor
if __name__ == '__main__':
    app.run_server(host='127.0.0.1', port= 8050, debug=False)
